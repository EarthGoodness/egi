--- custom_components/egi/adapters/solo.py
+++ custom_components/egi/adapters/solo.py
@@
-# Human-readable adapter name
-name = "EGI Solo Adapter"
-# Solo supports exactly one IDU
-max_idus = 1
-
-# Feature flags
-supports_scan = False
-supports_brand_write = True
-supports_restart = True
-supports_factory_reset = False
+class SoloAdapter(BaseAdapter):
+    """Adapter logic for EGI HVAC Adapter Solo (single IDU)."""
+    def __init__(self):
+        super().__init__()
+        # Human-readable adapter name
+        self.name = "EGI Solo Adapter"
+        # Solo supports exactly one IDU
+        self.max_idus = 1
+        # Feature flags
+        self.supports_scan = False
+        self.supports_brand_write = True
+        self.supports_restart = True
+        self.supports_factory_reset = False
@@
-    @property
-    def registers(self) -> list[tuple[int, str]]:
+    @property
+    def registers(self) -> list[tuple[int, str]]:

--- custom_components/egi/sensor.py
+++ custom_components/egi/sensor.py
@@ async_setup_entry(hass, entry, async_add_entities):
-    registers = getattr(adapter, "registers", None)
-    if registers:
+    # Only expose raw registers if adapter supports scanning
+    registers = getattr(adapter, "registers", None)
+    if registers and getattr(adapter, "supports_scan", False):

--- custom_components/egi/button.py
+++ custom_components/egi/button.py
@@ async_setup_entry(hass, config_entry, async_add_entities):
-    buttons = [
-        EgiVrfRescanButton(coordinator, config_entry, adapter),
-    ]
+    buttons = []
+    # Only add rescan for multi-unit (VRF) adapters
+    if getattr(adapter, "supports_scan", False):
+        buttons.append(EgiVrfRescanButton(coordinator, config_entry, adapter))
@@
-    if getattr(adapter, "supports_brand_write", False):
+    if getattr(adapter, "supports_brand_write", False):
         buttons.append(AdapterRestartButton(coordinator, config_entry, adapter))
         buttons.append(AdapterFactoryResetButton(coordinator, config_entry, adapter))

--- egi/custom_components/egi/climate.py
+++ custom_components/egi/climate.py
@@ async_setup_entry(hass, config_entry, async_add_entities):
-    entities = [EgiVrfClimate(coord, adapter, config_entry, system, index) for (system, index) in coord.devices]
+    # For Solo adapter, only one entity with adapter-level device
+    if adapter.max_idus == 1:
+        entities = [EgiVrfClimate(coord, adapter, config_entry, 1, 1)]
+    else:
+        entities = [EgiVrfClimate(coord, adapter, config_entry, system, index) for (system, index) in coord.devices]

--- custom_components/egi/climate.py
+++ custom_components/egi/climate.py
@@ class EgiVrfClimate(CoordinatorEntity, ClimateEntity):
-        self._attr_name = f"Indoor Unit {system}-{index}"
-        self._attr_device_info = {
-            "identifiers": {(const.DOMAIN, f"{entry_id}_idu_{system}-{index}")},
-            "name": self._attr_name,
-            "manufacturer": "EGI",
-            "model": "VRF Indoor Unit",
-            "via_device": (const.DOMAIN, f"gateway_{entry_id}")
-        }
+        if adapter.max_idus == 1:
+            # Single-unit (Solo) adapter: use adapter device stub
+            self._attr_name = adapter.name
+            self._attr_device_info = {
+                "identifiers": {(const.DOMAIN, f"adapter_{entry_id}")},
+                "name": adapter.name,
+                "manufacturer": "EGI",
+                "model": adapter.name,
+            }
+        else:
+            # Multi-unit VRF: individual IDUs under gateway
+            self._attr_name = f"Indoor Unit {system}-{index}"
+            self._attr_device_info = {
+                "identifiers": {(const.DOMAIN, f"{entry_id}_idu_{system}-{index}")},
+                "name": self._attr_name,
+                "manufacturer": "EGI",
+                "model": "VRF Indoor Unit",
+                "via_device": (const.DOMAIN, f"gateway_{entry_id}")
+            }
